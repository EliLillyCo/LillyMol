
#include "Foundational/iwstring/iwstring.h"

static const char b64_tab[256] =
{
    '\177', '\177', '\177', '\177', '\177', '\177', '\177', '\177', /*000-007*/
    '\177', '\177', '\177', '\177', '\177', '\177', '\177', '\177', /*010-017*/
    '\177', '\177', '\177', '\177', '\177', '\177', '\177', '\177', /*020-027*/
    '\177', '\177', '\177', '\177', '\177', '\177', '\177', '\177', /*030-037*/
    '\177', '\177', '\177', '\177', '\177', '\177', '\177', '\177', /*040-047*/
    '\177', '\177', '\177', '\76',  '\177', '\177', '\177', '\77',  /*050-057*/
    '\64',  '\65',  '\66',  '\67',  '\70',  '\71',  '\72',  '\73',  /*060-067*/
    '\74',  '\75',  '\177', '\177', '\177', '\100', '\177', '\177', /*070-077*/
    '\177', '\0',   '\1',   '\2',   '\3',   '\4',   '\5',   '\6',   /*100-107*/
    '\7',   '\10',  '\11',  '\12',  '\13',  '\14',  '\15',  '\16',  /*110-117*/
    '\17',  '\20',  '\21',  '\22',  '\23',  '\24',  '\25',  '\26',  /*120-127*/
    '\27',  '\30',  '\31',  '\177', '\177', '\177', '\177', '\177', /*130-137*/
    '\177', '\32',  '\33',  '\34',  '\35',  '\36',  '\37',  '\40',  /*140-147*/
    '\41',  '\42',  '\43',  '\44',  '\45',  '\46',  '\47',  '\50',  /*150-157*/
    '\51',  '\52',  '\53',  '\54',  '\55',  '\56',  '\57',  '\60',  /*160-167*/
    '\61',  '\62',  '\63',  '\177', '\177', '\177', '\177', '\177', /*170-177*/
    '\177', '\177', '\177', '\177', '\177', '\177', '\177', '\177', /*200-207*/
    '\177', '\177', '\177', '\177', '\177', '\177', '\177', '\177', /*210-217*/
    '\177', '\177', '\177', '\177', '\177', '\177', '\177', '\177', /*220-227*/
    '\177', '\177', '\177', '\177', '\177', '\177', '\177', '\177', /*230-237*/
    '\177', '\177', '\177', '\177', '\177', '\177', '\177', '\177', /*240-247*/
    '\177', '\177', '\177', '\177', '\177', '\177', '\177', '\177', /*250-257*/
    '\177', '\177', '\177', '\177', '\177', '\177', '\177', '\177', /*260-267*/
    '\177', '\177', '\177', '\177', '\177', '\177', '\177', '\177', /*270-277*/
    '\177', '\177', '\177', '\177', '\177', '\177', '\177', '\177', /*300-307*/
    '\177', '\177', '\177', '\177', '\177', '\177', '\177', '\177', /*310-317*/
    '\177', '\177', '\177', '\177', '\177', '\177', '\177', '\177', /*320-327*/
    '\177', '\177', '\177', '\177', '\177', '\177', '\177', '\177', /*330-337*/
    '\177', '\177', '\177', '\177', '\177', '\177', '\177', '\177', /*340-347*/
    '\177', '\177', '\177', '\177', '\177', '\177', '\177', '\177', /*350-357*/
    '\177', '\177', '\177', '\177', '\177', '\177', '\177', '\177', /*360-367*/
    '\177', '\177', '\177', '\177', '\177', '\177', '\177', '\177', /*370-377*/
};

int
IWuudecode(const unsigned char * p, int nchars, unsigned char * destination)
{
  assert (nullptr != destination);

/* The following implementation of the base64 decoding might look
   a bit clumsy but I only try to follow the POSIX standard:
   ``All line breaks or other characters not found in the table
     [with base64 characters] shall be ignored by decoding
     software.''  */

  while (nchars > 0)
  {
    char c1, c2, c3;

    c1 = b64_tab[*p++];

    c2 = b64_tab[*p++];

    nchars = nchars - 2;

    *destination = (c1 << 2) | (c2 >> 4);

    if (0 == nchars)
      return 1;

    c3 = b64_tab[*p++];
    nchars--;

    destination++;
    *destination = (c2 << 4) | (c3 >> 2);

    destination++;
    *destination = (c3 << 6) | b64_tab[*p++];
    destination++;
    nchars--;
  }

  return 1;
}

int
IWuudecode_bytes_needed (int nchars)
{
  assert (nchars > 0);

  int rc = nchars / 4 * 3;

  int mod = nchars % 4;

  if (0 == mod)
    ;
  else if (2 == mod)
    rc++;
  else if (3 == mod)
    rc += 2;
  else 
  {
    cerr << "Cannot have " << nchars << " characters in an encoded string\n";
    return -1;
  }

  return rc;
}

int
IWuudecode(const IWString & s,
           unsigned char * destination)
{
  return IWuudecode(reinterpret_cast<const unsigned char *> (s.rawchars ()), s.length (), destination);
}

int
IWuudecode(const const_IWSubstring & s,
           unsigned char * destination)
{
  return IWuudecode(reinterpret_cast<const unsigned char *> (s.rawchars ()), s.length (), destination);
}
