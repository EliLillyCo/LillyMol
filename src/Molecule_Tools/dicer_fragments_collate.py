""" Collate multiple fragstat proto files generated by dicer.
When run with the -B fragstatproto option, dicer generates files
of Dicer.DicerFragment protos.
This script accumulates any number of these and writes a combined
result.
The output file can go directly into

iwbdb_load.sh -v -c 1 -d name.bdb <generated here>
"""

from typing import Dict

from google.protobuf import text_format

from absl import app
from absl import flags
from absl import logging

from Molecule_Tools import dicer_fragments_pb2

FLAGS = flags.FLAGS

flags.DEFINE_string('output', None, 'Name of output file to produce')
flags.DEFINE_boolean('smiles', True, 'Input contains leading smiles column')

def main(argv):
  """Accumulate the files in ARGV to a single output
  """
  if len(argv) == 1:
    logging.fatal('Must specify files to be processed')

  leading_smiles = FLAGS.smiles

  # A mapping from unique smiles to DicerFragment.
  seen: Dict[str, dicer_fragments_pb2.DicerFragment] = {}
  for fname in argv[1:]:
    with open(fname, 'r') as reader:
      for line in reader.readlines():
        if leading_smiles:
          smiles, rest = line.split(maxsplit=1)
        else:
          rest = line

        proto = text_format.Parse(rest, dicer_fragments_pb2.DicerFragment())
        if proto.smi in seen:
          seen[proto.smi].n += 1
        else:
          seen[proto.smi] = proto

  logging.info('Have data on %d fragments', len(seen))
  with open(FLAGS.output, 'w') as writer:
    for smi, proto in seen.items():
      print(f'{smi} {text_format.MessageToString(proto, as_one_line=True)}', file=writer)
        

if __name__ == '__main__':
  app.run(main)
